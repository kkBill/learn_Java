<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

        <!--练习"属性注入"-->
        <bean id="car1" class="springbeans.Car">
            <property name="carBrand" value="宝马"></property>
            <property name="carPrice" value="300000"></property>
        </bean>
        <!--
        <bean id="car2" class="springbeans.Car">
            <property name="carBrand" value="奥迪"></property>
            <property name="carPrice" value="350000"></property>
        </bean>
        -->

        <!--采用p命名空间 -->
        <bean id="car2" class="springbeans.Car" p:carBrand="北京现代" p:carPrice="330000"></bean>


        <bean id="car3" class="springbeans.Car">
            <property name="carBrand" value="奔驰"></property>
            <property name="carPrice" value="390000"></property>
        </bean>


        <bean id="person" class="springbeans.Person">
            <!--通过property节点来设置Person类的属性-->
            <property name="name" value="kkBill"></property>
            <property name="age" value="24"></property>

            <!--如何配置集合属性-->

            <!--配置map属性-->
            <property name="courses">
                <map>
                    <entry key="CS"><value>90</value></entry>
                    <entry key="English"><value>87</value></entry>
                    <entry key="Algorithm" value="100"></entry>
                </map>
            </property>

            <!--配置list属性-->
            <property name="cars">
                <list>
                    <!--List里面的元素是引用，引用其他的bean，不再是字面值-->
                    <ref bean="car1"></ref>
                    <ref bean="car2"></ref>
                    <ref bean="car3"></ref>
                    <!--内部bean-->
                    <bean id="car4" class="springbeans.Car">
                        <property name="carBrand" value="特斯拉"></property>
                        <property name="carPrice" value="4500000"></property>
                    </bean>
                </list>
            </property>
        </bean>


        <!--练习构造器注入-->

        <!--通过构造器进行注入(默认，根据参数的顺序来)
        <bean id="album" class="springbeans.Album">
            <constructor-arg value="JayChou"></constructor-arg>
            <constructor-arg value="听妈妈的话"></constructor-arg>
            <constructor-arg value="1"></constructor-arg>
        </bean>
        -->
        <!--通过构造器进行注入(通过index属性来指定参数的位置)，效果同上-->
        <bean id="album" class="springbeans.Album">
            <constructor-arg value="听妈妈的话" index="1"></constructor-arg>
            <!--
            <constructor-arg value="JayChou" index="0"></constructor-arg>
            -->
            <!--
                上面的方式称为通过value属性进行配置
                下面的方式称为通过<value>子节点进行配置，效果是一样的
            -->
            <constructor-arg index="0">
                <value>JayChou</value>
            </constructor-arg>

            <constructor-arg value="1" index="2"></constructor-arg>

        </bean>
        <!--通过构造器进行注入(通过type属性来指定参数的位置)，效果同上-->
        <bean id="album2" class="springbeans.Album">
            <!--
                此处的属性值包含特殊符号"<>"，因为<>是xml标签的特殊符号，所以不能直接使用
                需要把含有特殊字符的字面值包裹在<![CDATA[xxx]]>中
            -->
            <constructor-arg type="java.lang.String">
                <value><![CDATA[<JJ Lin>]]></value>
            </constructor-arg>

            <constructor-arg value="江南" type="java.lang.String"></constructor-arg>
            <constructor-arg value="2" type="int"></constructor-arg>
        </bean>

        <!--
            配置单例的集合bean，供多个bean调用
            需要引入新的命名空间（utility scheme），IDEA不需要手动在xml文件的前面配置，用去就好，它会自动把相应的命名空间添加上
        -->

        <!--这样定义好后，这个名为utilcars的list集合就可以被多个其他的bean引用了-->
        <util:list id="utilcars">
            <ref bean="car1"></ref>
            <ref bean="car2"></ref>
            <ref bean="car3"></ref>
        </util:list>

        <util:map id="utilcourses">
            <entry key="CSxx"><value>90</value></entry>
            <entry key="Englishxx"><value>87</value></entry>
            <entry key="Algorithmxx" value="100"></entry>
        </util:map>

        <bean id="person2" class="springbeans.Person">
            <property name="name" value="jack"></property>
            <property name="age" value="27"></property>
            <property name="cars" ref="utilcars"></property> <!--这里不再直接赋值，而是引用外部已经配置好的list-->
            <property name="courses" ref="utilcourses"></property>
        </bean>

</beans>